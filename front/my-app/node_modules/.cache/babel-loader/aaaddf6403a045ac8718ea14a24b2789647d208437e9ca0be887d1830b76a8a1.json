{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react\\\\my-app\\\\src\\\\exam\\\\Exam3.js\",\n  _s = $RefreshSig$();\n// State & Props \n\nimport { useState } from \"react\";\n\n// State lifting up : 상태 끌어올리기 \n// 리액트에서는 부모 컴포넌트가 자식 컴포넌트의 상태를 직접 변경할 수 없음 \n// -> 자식에서 발생한 이벤트를 부모에서 처리하도록 하는 상태 끌어올리기 패턴을 이용함 \n\n// 해당 파일에서 컴포넌트 총 3개 존재 \n// Id 컴포넌트 (자식)\n// Pw 컴포넌트 (자식) \n// Exam3 컴포넌트 (부모) - 해당 파일에서 내보낼 기본 컴포넌트 \n\n// Id 컴포넌트 (자식)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Id = props => {\n  // 부모에게서 전달받은 속성을 props라고 부름\n  //const [id, setId] = useState(\"\"); // 상태(state) 중 'id'를 생성하고 초기값 \"\" 설정   \n\n  return (\n    /*#__PURE__*/\n    // 컴포넌트 호출시 내보낼 \n    // JSX를 사용한 html 구문 작성부는 무조건 최상위 부모 태그 하나로 감싸져 있어야 함\n    // 최상위 태그 빈 태그여도 상관 없음 \n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"ID : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n};\n\n// Pw 컴포넌트 (자식)\n_c = Id;\nconst Pw = () => {\n  //const [pw, setPw] = useState(\"\"); // 상태(state) 중 'Pw'를 생성하고 초기값 \"\" 설정   \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Pw : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n// Exam3 컴포넌트 (부모)\n_c2 = Pw;\nconst Exam3 = () => {\n  _s();\n  // 자식의 상태를 부모에서 정의 (상태 끌어올리기)\n  const [id, setId] = useState(\"\");\n  const [pw, setPw] = useState(\"\");\n\n  // 자식의 상태를 변경할 수 있는 함수 정의 \n  const onChangeId = e => {\n    setId(e.target.value);\n  };\n  const onChangePw = e => {\n    setPw(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Id, {\n      onChangeId: onChangeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pw, {\n      onChangePw: onChangePw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: id.length === 0 || pw.length === 0,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Exam3, \"q1NHQv0amsj8/Mc+FUFqRboezwg=\");\n_c3 = Exam3;\nexport default Exam3;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Id\");\n$RefreshReg$(_c2, \"Pw\");\n$RefreshReg$(_c3, \"Exam3\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Id","props","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pw","_c2","Exam3","_s","id","setId","pw","setPw","onChangeId","e","target","value","onChangePw","disabled","length","_c3","$RefreshReg$"],"sources":["C:/workspace/react/my-app/src/exam/Exam3.js"],"sourcesContent":["// State & Props \r\n\r\nimport { useState } from \"react\"\r\n\r\n// State lifting up : 상태 끌어올리기 \r\n// 리액트에서는 부모 컴포넌트가 자식 컴포넌트의 상태를 직접 변경할 수 없음 \r\n// -> 자식에서 발생한 이벤트를 부모에서 처리하도록 하는 상태 끌어올리기 패턴을 이용함 \r\n\r\n// 해당 파일에서 컴포넌트 총 3개 존재 \r\n// Id 컴포넌트 (자식)\r\n// Pw 컴포넌트 (자식) \r\n// Exam3 컴포넌트 (부모) - 해당 파일에서 내보낼 기본 컴포넌트 \r\n\r\n// Id 컴포넌트 (자식)\r\nconst Id = (props) => {  // 부모에게서 전달받은 속성을 props라고 부름\r\n    //const [id, setId] = useState(\"\"); // 상태(state) 중 'id'를 생성하고 초기값 \"\" 설정   \r\n\r\n    return ( // 컴포넌트 호출시 내보낼 \r\n        // JSX를 사용한 html 구문 작성부는 무조건 최상위 부모 태그 하나로 감싸져 있어야 함\r\n        // 최상위 태그 빈 태그여도 상관 없음 \r\n\r\n        <> \r\n            <div>\r\n                <label>ID : </label>\r\n                <input />\r\n            </div>\r\n        </>\r\n    ); \r\n}\r\n\r\n// Pw 컴포넌트 (자식)\r\nconst Pw = () => {\r\n    //const [pw, setPw] = useState(\"\"); // 상태(state) 중 'Pw'를 생성하고 초기값 \"\" 설정   \r\n\r\n    return ( \r\n\r\n        <> \r\n            <div>\r\n                <label>Pw : </label>\r\n                <input />\r\n            </div>\r\n        </>\r\n    ); \r\n}\r\n\r\n// Exam3 컴포넌트 (부모)\r\nconst Exam3 = () => {\r\n\r\n    // 자식의 상태를 부모에서 정의 (상태 끌어올리기)\r\n    const [id, setId] = useState(\"\"); \r\n    const [pw, setPw] = useState(\"\");\r\n\r\n    // 자식의 상태를 변경할 수 있는 함수 정의 \r\n    const onChangeId = (e) => {\r\n        setId(e.target.value); \r\n    }\r\n\r\n    const onChangePw = (e) => {\r\n        setPw(e.target.value); \r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* 컴포넌트 중 Id를 불러 렌더링함 (Id가 Exam3의 자식이 됨) */}\r\n            <Id onChangeId={onChangeId}/>\r\n            {/* 컴포넌트 중 Pw를 불러 렌더링함 (Pw가 Exam3의 자식이 됨) */}\r\n            <Pw onChangePw={onChangePw}/>\r\n\r\n            <div>\r\n                {/* button의 disabled 속성 : 비활성화 속성 (비활성 true / 활성 false)\r\n                    -> id 와 pw 둘 다 작성되어야 활성화 \r\n                */}\r\n                <button disabled={id.length === 0 || pw.length === 0}>Login</button>\r\n            </div>\r\n        </>\r\n    ); \r\n}\r\n\r\nexport default Exam3; \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,EAAE,GAAIC,KAAK,IAAK;EAAG;EACrB;;EAEA;IAAA;IAAS;IACL;IACA;IAEAJ,OAAA,CAAAE,SAAA;MAAAG,QAAA,eACIL,OAAA;QAAAK,QAAA,gBACIL,OAAA;UAAAK,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBT,OAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC,gBACR;EAAC;AAEX,CAAC;;AAED;AAAAC,EAAA,GAhBMP,EAAE;AAiBR,MAAMQ,EAAE,GAAGA,CAAA,KAAM;EACb;;EAEA,oBAEIX,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACIL,OAAA;MAAAK,QAAA,gBACIL,OAAA;QAAAK,QAAA,EAAO;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpBT,OAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC,gBACR,CAAC;AAEX,CAAC;;AAED;AAAAG,GAAA,GAdMD,EAAE;AAeR,MAAME,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;EACA,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACmB,EAAE,EAAEC,KAAK,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAEhC;EACA,MAAMqB,UAAU,GAAIC,CAAC,IAAK;IACtBJ,KAAK,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EAED,MAAMC,UAAU,GAAIH,CAAC,IAAK;IACtBF,KAAK,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EAED,oBACItB,OAAA,CAAAE,SAAA;IAAAG,QAAA,gBAEIL,OAAA,CAACG,EAAE;MAACgB,UAAU,EAAEA;IAAW;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAE7BT,OAAA,CAACW,EAAE;MAACY,UAAU,EAAEA;IAAW;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAE7BT,OAAA;MAAAK,QAAA,eAIIL,OAAA;QAAQwB,QAAQ,EAAET,EAAE,CAACU,MAAM,KAAK,CAAC,IAAIR,EAAE,CAACQ,MAAM,KAAK,CAAE;QAAApB,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAAK,EAAA,CA9BKD,KAAK;AAAAa,GAAA,GAALb,KAAK;AAgCX,eAAeA,KAAK;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAAc,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAf,GAAA;AAAAe,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}