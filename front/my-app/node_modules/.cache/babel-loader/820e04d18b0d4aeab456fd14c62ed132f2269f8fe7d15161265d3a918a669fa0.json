{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react\\\\my-app\\\\src\\\\exam\\\\Exam4.js\",\n  _s = $RefreshSig$();\n// State & Props \n\nimport { useState } from \"react\";\n\n// Props Drilling : 상태 내리꽂기 \n// props를 통해 데이터를 전달할 때, 자식 컴포넌트에서 필요하지 않은 props를 계속 전달하는 행위\n// -> 코드의 가독성 및 유지보수성을 떨어트림\n// -> React Context API 나 Redux 같은 상태관리 라이브러리를 사용함 \n\n// Exam4 > Child1 > Child2 > Child3 > MyComponent 이런식으로 부모자식 관계가 연결되어 있을 때 \n// Exam4의 상태값을 MyComponent 에서 사용해야 한다면? \n\n// 부모 컴포넌트 \nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Exam4() {\n  _s();\n  const [name, setName] = useState(\"홍길동\");\n  const handleClick = () => {\n    setName(\"고길동\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Child1, {\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"\\uC774\\uB984 \\uBCC0\\uACBD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Exam4, \"jlU3Cb8HyOcWstmJChNKeQNYQ4k=\");\n_c = Exam4;\nfunction Child1(props) {\n  return /*#__PURE__*/_jsxDEV(Child2, {\n    name: props.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Child1;\nfunction Child2(props) {\n  return /*#__PURE__*/_jsxDEV(Child3, {\n    name: props.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n}\n_c3 = Child2;\nfunction Child3(props) {\n  return /*#__PURE__*/_jsxDEV(MyComponent, {\n    name: props.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n}\n\n// 자식 컴포넌트 \n_c4 = Child3;\nfunction MyComponent(props) {\n  // props는 Exam4에서부터 내리꽂기를 통해 전달받은 부모의 상태값\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}\n_c5 = MyComponent;\nexport default Exam4;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Exam4\");\n$RefreshReg$(_c2, \"Child1\");\n$RefreshReg$(_c3, \"Child2\");\n$RefreshReg$(_c4, \"Child3\");\n$RefreshReg$(_c5, \"MyComponent\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Exam4","_s","name","setName","handleClick","children","Child1","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","props","Child2","_c2","Child3","_c3","MyComponent","_c4","_c5","$RefreshReg$"],"sources":["C:/workspace/react/my-app/src/exam/Exam4.js"],"sourcesContent":["// State & Props \r\n\r\nimport { useState } from \"react\";\r\n\r\n// Props Drilling : 상태 내리꽂기 \r\n// props를 통해 데이터를 전달할 때, 자식 컴포넌트에서 필요하지 않은 props를 계속 전달하는 행위\r\n// -> 코드의 가독성 및 유지보수성을 떨어트림\r\n// -> React Context API 나 Redux 같은 상태관리 라이브러리를 사용함 \r\n\r\n// Exam4 > Child1 > Child2 > Child3 > MyComponent 이런식으로 부모자식 관계가 연결되어 있을 때 \r\n// Exam4의 상태값을 MyComponent 에서 사용해야 한다면? \r\n\r\n// 부모 컴포넌트 \r\nfunction Exam4() {\r\n    const [name, setName] = useState(\"홍길동\"); \r\n    \r\n    const handleClick = () => {\r\n        setName(\"고길동\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Child1 name={name}/>\r\n            <button onClick={handleClick}>이름 변경</button>\r\n        </>\r\n    ); \r\n}\r\n\r\nfunction Child1(props) {\r\n    return <Child2 name={props.name}/> \r\n}\r\n\r\nfunction Child2(props) {\r\n    return <Child3 name={props.name}/> \r\n}\r\n\r\nfunction Child3(props) {\r\n    return <MyComponent name={props.name}/>\r\n}\r\n\r\n// 자식 컴포넌트 \r\nfunction MyComponent(props) {\r\n\r\n    // props는 Exam4에서부터 내리꽂기를 통해 전달받은 부모의 상태값\r\n\r\n    return <div>{props.name}</div>\r\n\r\n}\r\n\r\nexport default Exam4; "],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtBD,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,oBACIN,OAAA,CAAAE,SAAA;IAAAM,QAAA,gBACIR,OAAA,CAACS,MAAM;MAACJ,IAAI,EAAEA;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACrBb,OAAA;MAAQc,OAAO,EAAEP,WAAY;MAAAC,QAAA,EAAC;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC9C,CAAC;AAEX;AAACT,EAAA,CAbQD,KAAK;AAAAY,EAAA,GAALZ,KAAK;AAed,SAASM,MAAMA,CAACO,KAAK,EAAE;EACnB,oBAAOhB,OAAA,CAACiB,MAAM;IAACZ,IAAI,EAAEW,KAAK,CAACX;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACtC;AAACK,GAAA,GAFQT,MAAM;AAIf,SAASQ,MAAMA,CAACD,KAAK,EAAE;EACnB,oBAAOhB,OAAA,CAACmB,MAAM;IAACd,IAAI,EAAEW,KAAK,CAACX;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACtC;AAACO,GAAA,GAFQH,MAAM;AAIf,SAASE,MAAMA,CAACH,KAAK,EAAE;EACnB,oBAAOhB,OAAA,CAACqB,WAAW;IAAChB,IAAI,EAAEW,KAAK,CAACX;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAC3C;;AAEA;AAAAS,GAAA,GAJSH,MAAM;AAKf,SAASE,WAAWA,CAACL,KAAK,EAAE;EAExB;;EAEA,oBAAOhB,OAAA;IAAAQ,QAAA,EAAMQ,KAAK,CAACX;EAAI;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAElC;AAACU,GAAA,GANQF,WAAW;AAQpB,eAAelB,KAAK;AAAC,IAAAY,EAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}